#!/usr/bin/env ruby

require "bundler/setup"
require "outboxer"
require "securerandom"

max_messages_count = ARGV.empty? ? 500_000 : ARGV[0].to_i

if max_messages_count <= 0
  puts "Please provide a positive integer for max messages count"
  exit(1)
end

environment = ENV.fetch("RAILS_ENV", "development")
db_config = Outboxer::Database.config(environment: environment, concurrency: 1)
Outboxer::Database.connect(config: db_config)

reader, writer = IO.pipe

Signal.trap("INT") { writer.puts("INT") }

queued_messages_count = 0

while queued_messages_count < max_messages_count
  break if reader.wait_readable(0) && reader.gets.strip == "INT"

  class Event
    attr_accessor :id

    def initialize(id:)
      @id = id
    end
  end

  messageable = Event.new(id: SecureRandom.hex(3))

  Outboxer::Message.queue(messageable: messageable)
  puts "queued message for #{messageable.class.name}/#{messageable.id}"
  queued_messages_count += 1
end

puts "Finished queuing #{queued_messages_count} messages."
