#!/usr/bin/env ruby

require "bundler/setup"
require "outboxer"

cli_options = Outboxer::Publisher.parse_cli_options(ARGV)
environment = cli_options.delete(:environment) || ENV["APP_ENV"] || ENV["RAILS_ENV"] || "development"
config_path = cli_options.delete(:config) || Outboxer::Publisher::CONFIG_DEFAULTS[:path]
config = Outboxer::Publisher.config(environment: environment, path: config_path)
options = Outboxer::Publisher::PUBLISH_MESSAGES_DEFAULTS.merge(config.merge(cli_options))
logger = Outboxer::Logger.new($stdout, level: options[:log_level])

database_config = Outboxer::Database.config(
  environment: environment, pool: Outboxer::Publisher.pool(concurrency: options[:concurrency]))

Outboxer::Database.connect(config: database_config, logger: logger)

begin
  Outboxer::Publisher.publish_messages(
    batch_size: options[:batch_size],
    concurrency: options[:concurrency],
    tick_interval: options[:tick_interval],
    poll_interval: options[:poll_interval],
    heartbeat_interval: options[:heartbeat_interval],
    sweep_interval: options[:sweep_interval],
    sweep_retention: options[:sweep_retention],
    sweep_batch_size: options[:sweep_batch_size],
    logger: logger
  ) do |publisher, messages|
    begin
      # TODO: publish messages here
    rescue => error
      logger.error(
        "Error raised during publishing " \
        "publisher_id=#{publisher[:id]} " \
        "message_ids=#{messages.map { |message| message[:id] }.join(",")}\n" \
        "#{error.class}: #{error.message}\n" \
        "#{error.backtrace.join("\n")}")

      Outboxer::Publisher.update_messages_by_ids(
        id: publisher[:id], name: publisher[:name],
        failed_message_ids: messages.map { | message| message[:id] })
    else
      Outboxer::Publisher.update_messages_by_ids(
        id: publisher[:id], name: publisher[:name],
        published_message_ids: messages.map { | message| message[:id] })
    end
  end
ensure
  Outboxer::Database.disconnect(logger: logger)
end
