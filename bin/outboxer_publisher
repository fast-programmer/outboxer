#!/usr/bin/env ruby

require "bundler/setup"
require "outboxer"

cli_options = Outboxer::Publisher.parse_cli_options(ARGV)
environment = cli_options.delete(:environment) || ENV["APP_ENV"] || ENV["RAILS_ENV"] || "development"
config_path = cli_options.delete(:config) || Outboxer::Publisher::CONFIG_DEFAULTS[:path]
config = Outboxer::Publisher.config(environment: environment, path: config_path)
options = Outboxer::Publisher::PUBLISH_MESSAGES_DEFAULTS.merge(config.merge(cli_options))
logger = Outboxer::Logger.new($stdout, level: options[:log_level])

database_config = Outboxer::Database.config(
  environment: environment, concurrency: options[:concurrency])

Outboxer::Database.connect(config: database_config, logger: logger)

begin
  Outboxer::Publisher.publish_messages(
    buffer_size: options[:buffer_size],
    concurrency: options[:concurrency],
    tick_interval: options[:tick_interval],
    poll_interval: options[:poll_interval],
    heartbeat_interval: options[:heartbeat_interval],
    sweep_interval: options[:sweep_interval],
    sweep_retention: options[:sweep_retention],
    sweep_batch_size: options[:sweep_batch_size],
    logger: logger
  ) do |publisher, messages|
    # TODO: publish messages here

    Outboxer::Message.published_by_ids(
      ids: messages.map { |message| message[:id] },
      publisher_id: publisher[:id],
      publisher_name: publisher[:name])
  rescue StandardError => error
    logger.info error.message
    puts error.message

    Outboxer::Message.failed_by_ids(
      ids: messages.map { |message| message[:id] },
      exception: error,
      publisher_id: publisher[:id],
      publisher_name: publisher[:name])
  end
ensure
  Outboxer::Database.disconnect(logger: logger)
end
