#!/usr/bin/env ruby

require "bundler/setup"
require "sidekiq"
require "outboxer"
require_relative "../app/jobs/outboxer_integration/publish_message_job"

args = Outboxer::PublisherService.parse_options(ARGV)
config_path = args.delete(:config) || Outboxer::PublisherService::CONFIG_DEFAULTS[:path]
environment = args.delete(:environment) || ENV["APP_ENV"] || ENV["RAILS_ENV"] || "development"
config = Outboxer::PublisherService.config(path: config_path, environment: environment)
options = Outboxer::PublisherService::PUBLISH_DEFAULTS.merge(config.merge(args))
logger = Outboxer::Logger.new($stdout, level: options[:log_level])

Sidekiq.configure_client do |client_config|
  client_config.redis = {
    url: ENV.fetch("REDIS_URL", "redis://localhost:6379"), size: options[:concurrency]
  }
  client_config.logger = logger
end

database_config = Outboxer::DatabaseService.config(
  environment: environment,
  pool: Outboxer::PublisherService.total_thread_count(concurrency: options[:concurrency]))

Outboxer::DatabaseService.connect(config: database_config, logger: logger)

begin
  Outboxer::PublisherService.publish(
    buffer: options[:buffer],
    concurrency: options[:concurrency],
    tick: options[:tick],
    poll: options[:poll],
    heartbeat: options[:heartbeat],
    logger: logger
  ) do |message|
      OutboxerIntegration::PublishMessageJob.perform_async({
        "message_id" => message[:id],
        "messageable_id" => message[:messageable_id],
        "messageable_type" => message[:messageable_type]
      })
    end
ensure
  Outboxer::DatabaseService.disconnect(logger: logger)
end

# bin/outboxer_publisher
# bin/outboxer_publisher --config config/outboxer.yml --environment development --log_level 1
