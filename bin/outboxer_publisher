#!/usr/bin/env ruby

require "bundler/setup"
require "sidekiq"
require "outboxer"
require_relative "../app/jobs/outboxer_integration/publish_message_job"

cli_options = Outboxer::Publisher.parse_cli_options(ARGV)
environment = cli_options.delete(:environment) || ENV["APP_ENV"] || ENV["RAILS_ENV"] || "development"
config_path = cli_options.delete(:config) || Outboxer::Publisher::CONFIG_DEFAULTS[:path]
config = Outboxer::Publisher.config(environment: environment, path: config_path)
options = Outboxer::Publisher::PUBLISH_DEFAULTS.merge(config.merge(cli_options))
logger = Outboxer::Logger.new($stdout, level: options[:log_level])

Sidekiq.configure_client do |client_config|
  client_config.redis = {
    url: ENV["REDIS_URL"] || "redis://localhost:6379",
    size: options[:concurrency]
  }
  client_config.logger = logger
end

database_config = Outboxer::Database.config(
  environment: environment, concurrency: options[:concurrency])

Outboxer::Database.connect(config: database_config, logger: logger)

begin
  Outboxer::Publisher.publish_message(
    buffer: options[:buffer],
    concurrency: options[:concurrency],
    tick: options[:tick],
    poll: options[:poll],
    heartbeat: options[:heartbeat],
    logger: logger
  ) do |message|
    if EventCreatedJob.can_handle?(type: message[:messageable_type])
      EventCreatedJob.perform_async({
        "id" => message[:messageable_id],
        "type" => message[:messageable_type]
      })
    end
  end
ensure
  Outboxer::Database.disconnect(logger: logger)
end
