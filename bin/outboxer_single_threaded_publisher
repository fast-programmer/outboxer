#!/usr/bin/env ruby

require 'bundler/setup'
require 'sidekiq'
require 'outboxer'

require_relative '../app/jobs/event_created_job'

options = {
  environment: ENV.fetch('OUTBOXER_ENV', 'development'),
  buffer_size: ENV.fetch('OUTBOXER_BUFFER_SIZE', 200).to_i,
  buffer_poll_interval: ENV.fetch('OUTBOXER_BUFFER_POLL_INTERVAL', 0.1),
  database_poll_interval: ENV.fetch('OUTBOXER_DATABASE_POLL_INTERVAL', 10),
  log_level: ENV.fetch('OUTBOXER_LOG_LEVEL', 'info').downcase,
  redis_url: ENV.fetch('OUTBOXER_REDIS_URL', 'redis://localhost:6379/0'),
}

Sidekiq.configure_client do |config|
  config.redis = { url: options[:redis_url], size: options[:concurrency] }
end

logger = Outboxer::Logger.new $stdout, level: Logger.const_get(options[:log_level].upcase)

db_config = Outboxer::Database.config(environment: options[:environment], pool: 1)

Outboxer::Database.connect(config: db_config, logger: logger)

['INT', 'TERM'].each do |signal|
  Signal.trap(signal) do
    Outboxer::SingleThreadedPublisher.stop
  end
end

Outboxer::SingleThreadedPublisher.publish(
  buffer_size: options[:buffer_size],
  buffer_poll_interval: options[:buffer_poll_interval],
  database_poll_interval: options[:database_poll_interval],
  logger: logger
) do |message|
  case message[:messageable_type]
  when 'Event'
    EventCreatedJob.perform_async({ 'id' => message[:messageable_id] })
  end
end

Outboxer::Database.disconnect(logger: logger)

# bin/outboxer_single_threaded_publisher
