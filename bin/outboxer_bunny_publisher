#!/usr/bin/env ruby

require "bundler/setup"
require "outboxer"
require "bunny"
require "json"

cli_options = Outboxer::Publisher.parse_cli_options(ARGV)
environment = cli_options.delete(:environment) || ENV["APP_ENV"] || ENV["RAILS_ENV"] || "development"
options = Outboxer::Publisher::PUBLISH_MESSAGES_DEFAULTS.merge(cli_options)
logger = Outboxer::Logger.new($stdout, level: options[:log_level])

database_config = Outboxer::Database.config(
  environment: environment,
  pool: Outboxer::Publisher.pool(concurrency: options[:concurrency]))

Outboxer::Database.connect(config: database_config, logger: logger)

bunny = Bunny.new(
  ENV.fetch("RABBITMQ_URL"),
  automatically_recover: true,
  heartbeat: 10)

bunny.start

channel = bunny.create_channel
channel.confirm_select

exchange_name = ENV.fetch("BUNNY_EXCHANGE")
routing_key = ENV.fetch("BUNNY_ROUTING_KEY", "")

exchange = channel.direct(exchange_name, durable: true)

begin
  Outboxer::Publisher.publish_messages(concurrency: 25, batch_size: 1) do |publisher, messages|
    message = messages.first

    begin
      exchange.publish(
        {
          messageable_type: message[:messageable_type],
          messageable_id: message[:messageable_id]
        }.to_json,
        routing_key: routing_key,
        persistent: true,
        message_id: message[:id].to_s)

      unless channel.wait_for_confirms
        raise "RabbitMQ did not confirm message delivery"
      end

      Outboxer::Publisher.update_messages_by_ids(
        publisher_id: publisher[:id],
        publisher_name: publisher[:name],
        published_message_ids: [message[:id]])
    rescue => error
      logger.error(
        "Bunny::Exchange#publish failed for publisher_id=#{publisher[:id]} " \
        "message_id=#{message[:id]}\n" \
        "#{error.class}: #{error.message}\n" \
        "#{error.backtrace.join("\n")}")

      Outboxer::Publisher.update_messages_by_ids(
        publisher_id: publisher[:id],
        publisher_name: publisher[:name],
        failed_message_ids: [message[:id]])
    end
  end
ensure
  channel.close if channel.open?
  bunny.close if bunny.open?
  Outboxer::Database.disconnect(logger: logger)
end
