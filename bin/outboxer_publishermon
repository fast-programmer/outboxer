#!/usr/bin/env ruby

require 'bundler/setup'
require 'outboxer'
require 'sidekiq'

def cpu_cores
  RUBY_PLATFORM.include?("darwin") ? `sysctl -n hw.ncpu`.to_i : `nproc`.to_i
end

def fetch_process_stats(pid)
  cores = cpu_cores
  stats = `ps -p #{pid} -o rss=,pcpu=,etime=`.strip
  rss, cpu, elapsed = stats.split(" ")
  rss_mb = rss.to_i / 1024
  cpu_per_core = (cpu.to_f / cores).round(2)
  { pid: pid, rss_mb: rss_mb, cpu: cpu, cpu_per_core: cpu_per_core, elapsed: elapsed }
end

def outboxer_publisher_pids
  `pgrep -f bin/outboxer_publisher$`.strip.split("\n")
end

def format_metrics(metrics)
  metrics.map do |status, data|
    [
      status,
      data.dig(:count, :historic) || '-',
      data.dig(:count, :current),
      data.dig(:count, :total) || '-',
      data[:throughput],
      data[:latency]
    ]
  end
end

environment = ENV['OUTBOXER_ENV'] || 'development'
db_config = Outboxer::Database.config(environment: environment, pool: 1)
Outboxer::Database.connect(config: db_config)

Signal.trap("SIGINT") do
  puts "\nExiting gracefully..."
  exit
end

loop do
  system("clear") || system("cls")

  metrics = nil

  ActiveRecord::Base.connection_pool.with_connection do
    metrics = Outboxer::Messages.metrics(current_utc_time: Time.now.utc)
  end

  pids = outboxer_publisher_pids.sort

  puts "Outboxer Publisher Monitor"
  puts Time.now.utc
  puts "\n---- Messages Stats ----"
  puts format("%-12s %-15s %-15s %-15s %-15s %-15s", "Status", "Historic count", "Current count",
              "Total count", "Throughput", "Latency")
  puts "-" * 80
  format_metrics(metrics).each do |row|
    puts format("%-12s %-15s %-15s %-15s %-15s %-15s", *row)
  end

  if pids.empty?
    puts "\nbin/outboxer_message_publisher processes not found."
  else
    puts "\n---- Process Stats ----"
    puts format("%-6s %-15s %-10s %-10s %-15s", "PID", "Memory Usage", "CPU Total", "CPU/Core", "Running Time")
    puts "-" * 60
    pids.each do |pid|
      stats = fetch_process_stats(pid)
      puts format("%-6s %-15s %-10s %-10s %-15s", stats[:pid], "#{stats[:rss_mb]} MB", "#{stats[:cpu]}%",
                  "#{stats[:cpu_per_core]}%", stats[:elapsed])
    end
  end

  sleep(0.5)
end
